package at.jku.dke.etutor.modules.uml;

import at.jku.dke.etutor.core.evaluation.*;
import at.jku.dke.etutor.modules.uml.analysis.UMLAnalysis;
import at.jku.dke.etutor.modules.uml.report.UMLReport;
import net.sourceforge.plantuml.FileFormat;
import net.sourceforge.plantuml.FileFormatOption;
import net.sourceforge.plantuml.SourceStringReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayOutputStream;
import java.util.Base64;
import java.util.Locale;
import java.util.Map;

/**
 * Implementation of the {@link Evaluator} for UML submissions.
 */
public class UMLEvaluator implements Evaluator {
    private static final Logger logger = LoggerFactory.getLogger(UMLEvaluator.class);
    private static final String ACTION_DIAGNOSE = "test";
    private static final String ACTION_SUBMIT = "submit";
    private static final String ATTRIBUTE_ACTION = "action";
    private static final String ATTRIBUTE_SUBMISSION = "submission";
    private static final String ATTRIBUTE_DIAG_LEVEL = "diagnoseLevel";

    /**
     * Creates a new instance of class {@linkplain UMLEvaluator}.
     */
    public UMLEvaluator() {
    }

    /**
     * Analyzes the UML submission.
     *
     * @param exerciseID       The exercise identifier.
     * @param userID           The user identifier.
     * @param passedAttributes A map containing the submission attributes.
     * @param passedParameters A map containing the submission parameters.
     * @param locale           The UI locale.
     * @return The analysis.
     * @throws Exception If an error occurred while analyzing the submission.
     */
    @Override
    public Analysis analyze(int exerciseID, int userID, Map<String, String> passedAttributes, Map<String, String> passedParameters, Locale locale) throws Exception {
        logger.info("Analyzing exercise {} for user {}", exerciseID, userID);

        // Prepare required data
        String action = passedAttributes.get(ATTRIBUTE_ACTION);
        String submission = passedAttributes.get(ATTRIBUTE_SUBMISSION);
        int diagnoseLevel = Integer.parseInt(passedAttributes.get(ATTRIBUTE_DIAG_LEVEL));

        // Generate result
        var analysis = new UMLAnalysis();
        analysis.setSubmission(submission);
        analysis.setSubmissionSuitsSolution(false);
        // TODO: analyze
        return analysis;
    }

    /**
     * Grades the UML submission according to the {@code analysis}.
     *
     * @param analysis         The analysis generated by {@link #analyze(int, int, Map, Map, Locale)}.
     * @param maxPoints        The maximum reachable points for this task.
     * @param passedAttributes A map containing the submission attributes.
     * @param passedParameters A map containing the submission parameters.
     * @return The grading.
     * @throws Exception If an error occurred while grading the submission.
     */
    @Override
    public Grading grade(Analysis analysis, int maxPoints, Map<String, String> passedAttributes, Map<String, String> passedParameters) throws Exception {
        var grading = new DefaultGrading();
        grading.setPoints(0);
        grading.setMaxPoints(0);
        // TODO: grading
        return grading;
    }

    /**
     * Creates a report for the UML submission according to the  {@code analysis} and the  {@code grading}.
     *
     * @param analysis         The analysis generated by {@link #analyze(int, int, Map, Map, Locale)}.
     * @param grading          The grading generated by {@link #grade(Analysis, int, Map, Map)}.
     * @param passedAttributes A map containing the submission attributes.
     * @param passedParameters A map containing the submission parameters.
     * @param locale           The UI locale.
     * @return The report.
     * @throws Exception If an error occurred while generating the report.
     */
    @Override
    public Report report(Analysis analysis, Grading grading, Map<String, String> passedAttributes, Map<String, String> passedParameters, Locale locale) throws Exception {
        var report = new UMLReport();
        // TODO: report
        return report;
    }

    /**
     * Converts the analysis result to an HTML fragment.
     *
     * @param analysis         The analysis generated by {@link #analyze(int, int, Map, Map, Locale)}..
     * @param passedAttributes A map containing the submission attributes.
     * @param locale           The UI locale.
     * @return The HTML code.
     */
    @Override
    public String generateHTMLResult(Analysis analysis, Map<String, String> passedAttributes, Locale locale) {
        if (!(analysis instanceof UMLAnalysis umlAnalysis))
            return null;

        try {
            SourceStringReader reader = new SourceStringReader((String) umlAnalysis.getSubmission());
            try (var baos = new ByteArrayOutputStream()) {
                reader.outputImage(baos, new FileFormatOption(FileFormat.PNG));
                String base64EncodedImage = Base64.getEncoder().encodeToString(baos.toByteArray());
                return "<img src=\"data:image/png;base64," + base64EncodedImage + "\" alt=\"UML-Diagramm\">";
            }
        } catch (Exception ex) {
            return "<p>" + ex.getMessage() + "</p>";
        }
    }
}
