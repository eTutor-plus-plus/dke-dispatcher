package etutor.modules.xquery.analysis;

import java.util.Properties;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import de.fraunhofer.ipsi.ipsixq.api.XQIDriver;
import de.fraunhofer.ipsi.xquery.api.Connection;
import de.fraunhofer.ipsi.xquery.api.Driver;
import de.fraunhofer.ipsi.xquery.api.QueryResult;
import de.fraunhofer.ipsi.xquery.api.XQueryException;
import etutor.modules.xquery.InternalException;

/**
 * A processor for evaluating XQuery queries. The underlying processor consists of classes from a Java library
 * provided by the <i>Fraunhofer Institut (Integrierte Publikations- und Informationssysteme)</i>,
 * called <i>IPSI-XQ</i>, version 1.3.2. 
 * 
 * @author Georg Nitsche
 * @version 1.0
 * @since 1.0
 */
public class XQProcessor {

    private Driver driver;

	private Properties props;

    private XQAnalysis diff;

    private Connection connection;
	
	/**
	 * Constructs a new XQuery processor instance.
	 * 
	 * @throws XQueryException if an unexpected Exception was thrown when setting up the underlying XQuery processor.
	 */
	public XQProcessor() throws XQueryException {
		props = new Properties();
		props.setProperty("CorePrettyPrint", "false");
		props.setProperty("XQueryPrettyPrint", "false");		
		props.setProperty("infer", "false");
		props.setProperty("eval", "true");
		driver = new XQIDriver();
		connection = driver.connect(".", props);
	}
	
	/**
	 * Executes and evaluates an XQuery query.

	 * @param query The query to evaluate.
	 * @return A String representing the result as it is returned by the underlying XQuery processor.
	 * @throws XQueryException if the query has syntax errors.
	 * @throws InternalException The result of the query is part of an XML document which is generated by the underlying
	 * query processor. This unexpected exception is thrown if extracting this part from the document fails.
	 */
	public String executeQuery(String query) throws XQueryException, InternalException {

		QueryResult result = connection.executeQuery(query);
		Document document = result.getDocument();
		return getEvalResultValue(document);
		
	}
	/**
	 * Used for extracting the result of a query from an XML document, which is generated and returned by the underlying
	 * XQuery processor.
	 *  
	 * @param parentNode The XML node which represents the XML document returned by the XQuery processor.
	 * @return The query result.
	 * @throws InternalException if extracting the result from the document fails.
	 */
	private String getEvalResultValue(Node parentNode) throws InternalException {
	    NodeList childNodes = parentNode.getChildNodes();
		for (int i=0; i<childNodes.getLength(); i++) {
			Node node = childNodes.item(i);
			if (node.getNodeType() == Node.CDATA_SECTION_NODE) {
				return node.getNodeValue().trim();
			} else {
				return getEvalResultValue(node);
			}
		}
		String message = "Fatal: could not retrieve XQuery result section from the result produced by the XQuery processor.";
		throw new InternalException(message);
	}
	
}
