package at.jku.dke.etutor.grading.service;


import at.jku.dke.etutor.grading.rest.dto.RestGrading;
import at.jku.dke.etutor.grading.rest.dto.Submission;
import at.jku.dke.etutor.core.evaluation.Analysis;
import at.jku.dke.etutor.core.evaluation.Evaluator;
import at.jku.dke.etutor.core.evaluation.Grading;
import at.jku.dke.etutor.grading.rest.dto.SubmissionId;
import at.jku.dke.etutor.modules.sql.analysis.SQLAnalysis;
import at.jku.dke.etutor.modules.sql.analysis.SQLCriterionAnalysis;
import at.jku.dke.etutor.modules.sql.grading.SQLGrader;


import java.util.Iterator;
import java.util.Locale;


/**
 * Is used to forward the submission to the corresponding module
 *  and persist the resulting at.jku.dke.etutor.evaluation.Grading which is identified by the submissionId
 */

public class SubmissionDispatcher implements Runnable{
    /**
     * @param submission: the submission which is sent to ETutorSubmissionController
     * @param submissionId: the id which is generated by the rest-service and needed to request the grading
     */
    private Submission submission;
    private SubmissionId submissionId;


    public SubmissionDispatcher(Submission submission, SubmissionId submissionId){
        this.submission=submission;
        this.submissionId=submissionId;
        DatabaseManager.addSubmission(submission, submissionId);
    }
    /**
     * Identifies the module according to submission.taskType
     *  and calls the modules' implementations for evaluating the submission.
     *  To be done: saves the at.jku.dke.etutor.evaluation.Grading-Object
     */
    @Override
    public void run() {
        try {
            Evaluator evaluator = ModuleManager.getEvaluator(submission.getTaskType());
            if (evaluator != null){
                Analysis analysis = evaluator
                        .analyze(submission.getExerciseId(),
                        submission.getUserId(), submission.getPassedAttributes(), submission.getPassedParameters());

                Grading grading = evaluator.grade(analysis, submission.getMaxPoints(),
                        submission.getPassedAttributes(), submission.getPassedParameters());

                RestGrading restGrading = new RestGrading(grading.getPoints(), grading.getMaxPoints());
                DatabaseManager.addGrading(restGrading, submissionId);
                processAnalysis(analysis);
           }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void processAnalysis(Analysis analysis){
        if (analysis instanceof SQLAnalysis){
            Iterator it =  ((SQLAnalysis) analysis).iterCriterionAnalyses();
            while(it.hasNext()) {
                SQLCriterionAnalysis temp = (SQLCriterionAnalysis) it.next();
                System.out.println(temp.toString() + " " + temp.isCriterionSatisfied());
                System.out.println("EvaluationCriterion " + " " + temp.getEvaluationCriterion().toString());
                System.out.println("AnalysisException" + " "+ temp.getAnalysisException());
            }
        }
    }

    public Submission getSubmission() {
        return submission;
    }

    public void setSubmission(Submission submission) {
        this.submission = submission;
    }

    public SubmissionId getSubmissionId() {
        return submissionId;
    }

    public void setSubmissionId(SubmissionId submissionId) {
        this.submissionId = submissionId;
    }
}
