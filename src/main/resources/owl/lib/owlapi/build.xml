<project default="distribution">

    <!-- A very, very simple Ant script which will build an OWL API release
         as one jar file containing the binary code, one jar file containing
         the source code, a directory containing the javadoc and a zip file
         containing these build products.  This is a simpler and more lightweight
         alternative to building the API with MAVEN -->

    <!-- The version of the API being built - this is used to name
          the zip file produced by the build.  For release builds this
          should be of the format <major>.<minor>.<revision>.  Note that the svn
            revision number will automatically be appended to this build number! -->
    <property name="version" value="3.0.0"/>

    <!-- The directory that contains the jar file dependencies for
         the class path and building a release -->
    <property name="libdir" value="./lib"/>

    <!-- The directory where intermediate build products will be placed -->
    <property name="builddir" value="build"/>

    <!-- A directory into which class files will be placed during the build answer-->
    <property name="classesdir" value="${builddir}/classes"/>

    <!-- The directory where the javadoc will be generated to-->
    <property name="javadocdir" value="${builddir}/javadoc"/>


    <!-- The name of the jar file which contains the class files-->
    <property name="bin-name" value="owlapi-bin.jar"/>

    <!-- The name of the jar file that contains the gathered source files-->
    <property name="src-name" value="owlapi-src.jar"/>

    <property name="sourcepath" value="src/main/java/**/*.java"/>


    <!-- For the classpath, we just use all of the libraries in the
         lib directory -->
    <path id="classpath">
        <fileset dir="${libdir}">
            <include name="*.jar"/>
        </fileset>
    </path>


    <!-- Deletes all build products-->
    <target name="clean">
        <delete dir="${builddir}"/>
    </target>

    <!-- Compiles the source into a directory called classes inside
         the build directory -->
    <target name="compile">
        <mkdir dir="${classesdir}"/>
        <javac srcdir="./.." destdir="${classesdir}" debug="on">
            <classpath refid="classpath"/>
            <include name="api/${sourcepath}"/>
            <include name="apibinding/${sourcepath}"/>
            <include name="change/${sourcepath}"/>
            <include name="debugging/${sourcepath}"/>
            <include name="dlsyntax/${sourcepath}"/>
            <include name="functionalparser/${sourcepath}"/>
            <include name="functionalrenderer/${sourcepath}"/>
            <include name="impl/${sourcepath}"/>
            <include name="krssparser/${sourcepath}"/>
            <include name="krssrenderer/${sourcepath}"/>
            <include name="latexrenderer/${sourcepath}"/>
            <include name="mansyntaxparser/${sourcepath}"/>
            <include name="mansyntaxrenderer/${sourcepath}"/>
            <include name="metrics/${sourcepath}"/>
            <include name="modularity/${sourcepath}"/>
            <include name="normalform/${sourcepath}"/>
            <include name="oboparser/${sourcepath}"/>
            <include name="oborenderer/${sourcepath}"/>
            <include name="owlexpression/${sourcepath}"/>
            <include name="owlxmlparser/${sourcepath}"/>
            <include name="owlxmlrenderer/${sourcepath}"/>
            <include name="profiles/${sourcepath}"/>
            <include name="rdfapi/${sourcepath}"/>
            <include name="rdfxmlparser/${sourcepath}"/>
            <include name="rdfxmlrenderer/${sourcepath}"/>
            <include name="reasoner/${sourcepath}"/>
            <include name="turtlerenderer/${sourcepath}"/>
            <include name="turtleparser/${sourcepath}"/>
            <include name="util/${sourcepath}"/>
        </javac>
    </target>

    <!-- Creates a jar containing the OWL API binary code -->
    <target name="binjar" depends="compile">
        <!-- Get the SVN revision number -->
        <exec executable="svn" output="build/svn.properties">
            <arg value="info" />
        </exec>
      <property prefix="svn" file="build/svn.properties"/>
        <jar basedir="${classesdir}" destfile="${builddir}/${bin-name}">
            <manifest>
                <attribute name="Title" value="The OWL API"/>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Implementation-Version" value="${version}.${svn.Revision}"/>
            </manifest>
        </jar>
    </target>

    <!-- We just include the documentation for non-implementation stuff
         - including documentation for the impl package wouldn't make sense
         because end API users aren't expected to deal with this kind of thing -->
    <target name="javadoc">
        <mkdir dir="${javadocdir}"/>
        <javadoc destdir="${javadocdir}" verbose="no" windowtitle="The OWL API">
            <fileset dir="./.." defaultexcludes="yes">
                <include name="api/${sourcepath}"/>
                <include name="api/javadoc"/>
                <include name="apibinding/${sourcepath}"/>
                <include name="change/${sourcepath}"/>
                <include name="debugging/${sourcepath}"/>
                <include name="dlsyntax/${sourcepath}"/>
                <include name="impl/${sourcepath}"/>
                <include name="functionalparser/${sourcepath}"/>
                <include name="functionalrenderer/${sourcepath}"/>
                <include name="krssparser/${sourcepath}"/>
                <include name="krssrenderer/${sourcepath}"/>
                <include name="latexrenderer/${sourcepath}"/>
                <include name="mansyntaxparser/${sourcepath}"/>
                <include name="mansyntaxrenderer/${sourcepath}"/>
                <include name="metrics/${sourcepath}"/>
                <include name="modularity/${sourcepath}"/>
                <include name="normalform/${sourcepath}"/>
                <include name="oboparser/${sourcepath}"/>
                <include name="oborenderer/${sourcepath}"/>
                <include name="owlexpression/${sourcepath}"/>
                <include name="owlxmlparser/${sourcepath}"/>
                <include name="owlxmlrenderer/${sourcepath}"/>
                <include name="profiles/${sourcepath}"/>
                <include name="rdfapi/${sourcepath}"/>
                <include name="rdfxmlparser/${sourcepath}"/>
                <include name="rdfxmlrenderer/${sourcepath}"/>
                <include name="turtleparser/${sourcepath}"/>
                <include name="turtlerenderer/${sourcepath}"/>
                <include name="reasoner/${sourcepath}"/>
                <include name="util/${sourcepath}"/>
            </fileset>
        </javadoc>
        <copy todir="${javadocdir}/doc-files">
            <fileset dir="./../api/src/main/javadoc/doc-files"/>
        </copy>
    </target>

    <!-- Creates a jar containing the OWL API source code -->
    <target name="srcjar">
        <jar destfile="${builddir}/${src-name}">
            <manifest>
                <attribute name="title" value="The OWL API Source Code"/>
                <attribute name="built-by" value="${user.name}"/>
                <attribute name="version" value="${version}"/>
            </manifest>
            <fileset dir="../api/src/main/java"/>
            <fileset dir="../apibinding/src/main/java"/>
            <fileset dir="../change/src/main/java"/>
            <fileset dir="../debugging/src/main/java"/>
            <fileset dir="../dlsyntax/src/main/java"/>
            <fileset dir="../functionalparser/src/main/java"/>
            <fileset dir="../functionalrenderer/src/main/java"/>
            <fileset dir="../impl/src/main/java"/>
            <fileset dir="../krssparser/src/main/java"/>
            <fileset dir="../krssrenderer/src/main/java"/>
            <fileset dir="../latexrenderer/src/main/java"/>
            <fileset dir="../mansyntaxparser/src/main/java"/>
            <fileset dir="../mansyntaxrenderer/src/main/java"/>
            <fileset dir="../metrics/src/main/java"/>
            <fileset dir="../modularity/src/main/java"/>
            <fileset dir="../normalform/src/main/java"/>
            <fileset dir="../oboparser/src/main/java"/>
            <fileset dir="../oborenderer/src/main/java"/>
            <fileset dir="../owlexpression/src/main/java"/>
            <fileset dir="../owlxmlparser/src/main/java"/>
            <fileset dir="../owlxmlrenderer/src/main/java"/>
            <fileset dir="../profiles/src/main/java"/>
            <fileset dir="../rdfapi/src/main/java"/>
            <fileset dir="../rdfxmlparser/src/main/java"/>
            <fileset dir="../rdfxmlrenderer/src/main/java"/>
            <fileset dir="../reasoner/src/main/java"/>
            <fileset dir="../turtlerenderer/src/main/java"/>
            <fileset dir="../turtleparser/src/main/java"/>
            <fileset dir="../util/src/main/java"/>
        </jar>
    </target>

    <!-- Creates a zip file containing the jar file containing the OWL API
         class files, a jar file containing the source, a lib directory containing
         the dependencies for the distribution.  The zip file is names
         owlapi-${version}.zip -->
    <target name="distribution" depends="clean, binjar, srcjar, javadoc">
        <property name="distdir" value="${builddir}/dist"/>
        <mkdir dir="${distdir}"/>
        <copy todir="${distdir}/lib">
            <fileset dir="${libdir}"/>
        </copy>
        <copy todir="${distdir}">
            <fileset dir="./etc">
                <include name="*.*"/>
            </fileset>
            <fileset file="${builddir}/${bin-name}"/>
            <fileset file="${builddir}/${src-name}"/>
            <fileset file="build.xml"/>
            <fileset file="${src-name}"/>
        </copy>
        <copy todir="${distdir}/javadoc">
            <fileset dir="${javadocdir}"/>
        </copy>
        <zip destfile="${builddir}/owlapi-${version}.zip">
            <fileset dir="${distdir}"/>
        </zip>
    </target>

</project>